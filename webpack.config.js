const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const BundleAnalyzerPlugin =
  require('webpack-bundle-analyzer').BundleAnalyzerPlugin;

module.exports = {
  mode: 'development',
  // start point
  entry: {
    main: path.resolve(__dirname, 'src/index.js'),
  },
  // Output generated by Webpack tasks
  output: {
    path: path.resolve(__dirname, 'dist'),
    // make hash type for check Changes
    filename: '[name][contenthash].js',
    // Delete the old hash file
    clean: true,
    // Keep the image name in dist
    assetModuleFilename: '[name][ext]',
  },
  module: {
    rules: [
      {
        // File types to apply the loader to
        test: /\.s[ac]ss$/i,
        // The name of the loader to apply to the file, working in reverse order
        use: [
          // Creates 'style' node from JS strings
          'style-loader',
          // Translates CSS into CommonJS
          'css-loader',
          // Compiles Sass to CSS
          'sass-loader',
        ],
      },
      // set babel
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
          options: {
            presets: ['@babel/preset-env'],
          },
        },
      },
      // set Resource Asset
      {
        test: /\.(png|svg|jpg|jpeg|gif)$/,
        type: 'asset/resource',
      },
    ],
  },
  plugins: [
    new HtmlWebpackPlugin({
      filename: 'index.html',
      template: 'src/index.html',
    }),
    new BundleAnalyzerPlugin(),
  ],
  devtool: 'source-map',

  devServer: {
    static: {
      directory: path.join(__dirname, 'dist'),
    },
    compress: true,
    port: 3000,
    open: true,
  },
};
